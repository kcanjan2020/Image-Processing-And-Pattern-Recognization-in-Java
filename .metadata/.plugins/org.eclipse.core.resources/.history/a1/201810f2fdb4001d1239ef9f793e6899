
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

 public class HistogramEqualization {
	 
	 public static void main(String[] args) {
			// TODO Auto-generated method stub
			BufferedImage image;
			try 
			{
				image=ImageIO.read(new File("D:\\Computer Engineering Note\\7th Sem\\2. Image Processing And Pattern Recognization\\IPPR_Lab_Solution\\Mbappe.jpg"));
					System.out.println("Reading Complete");
			} 
			catch (IOException e)
				{
				// TODO: handle exception
				System.out.println("Error:"+e);
				return;
				}
			
			//Display Original Image
					displayGrayImage(image);
					
					//Display Gray Image
					int[][] f=getGrayImage(image);
					BufferedImage image2=arrayToImage(f);
					displayGrayImage(image2);
					
					//Display Threshold Image
					int[][] he= Histogramequalization(f);
					BufferedImage image3=arrayToImage(he);
					displayGrayImage(image3);
			
			try 
			{
				ImageIO.write(image, "jpg",new File("D:\\Computer Engineering Note\\7th Sem\\2. Image Processing And Pattern Recognization\\IPPR_Lab_Solution\\image_greyed.jpg"));
				System.out.println("Writing Complete");
			} catch (IOException e) {
		
				// TODO: handle exception
				System.out.println("Error:"+e);
				return;
			}
			
		}
		static int[][] getGrayImage(BufferedImage image)
		 {
			 int m=image.getWidth();
			 int n=image.getHeight();
			 int [][]f=new int[m][n];
			 for(int y=0;y<n;y++)
			 {
				 for(int x=0;x<m;x++)
				 {
					 Color c=new Color( image.getRGB(x, y));
						int red=c.getRed();
						int green=(c.getGreen());
						int blue=(c.getBlue());
						int gray=(int)(red+green+blue)/3;
						f[x][y]=gray; 
				 }
			 }
			 		return f;
			}
		
		static BufferedImage arrayToImage(int[][]f){
			BufferedImage image=new BufferedImage(f.length, f[0].length,BufferedImage.TYPE_BYTE_GRAY);
			for(int x=0;x<image.getWidth();x++)
			{
				for(int y=0;y<image.getHeight();y++)
				{
					Color newColor= new Color(f[x][y],f[x][y],f[x][y]);
					image.setRGB(x, y, newColor.getRGB());
				}
			}
			return image;

		}
		
	
		static int[][] Histogramequalization(int[][] z ) {
			
			 //int[][] f= new int[h.length][h[0].length];
			 int l=256;
			 int [] h =new int[l];
			double [] p =new double[l];
			 double [] s =new double[l];
			 double sum=0;
				for(int x=0;x<z.length;x++)
				{
					for(int y=0;y<z[0].length;y++)
					{
					  h[z[x][y]]++;
					 	
					}
				}
				for(int x=0;x<l-1;x++)
				{
					p[x]= (double) h[x]/(z.length*z[0].length);
				}
				
				
				for(int k=0;k<l;k++)
				{
					sum=0;
					for(int j=0;j<=k;j++)
					{
					  
					sum=sum+p[j]	;
					}
					 s[k]=(l-1)*sum;
				}
				for(int x=0;x<z.length;x++)
				{
					for(int y=0;y<z[0].length;y++)
					{
					  z[x][y]=(int) Math.round(s[z[x][y]]);
					 	
					}
				}
				
				return z;
			}
		static void displayGrayImage(BufferedImage image)
		{
			ImageIcon icon=new ImageIcon(image);
			JFrame frame=new JFrame();
			frame.setLayout(new FlowLayout());
			frame.setSize(3500,2000);
			JLabel lbl=new JLabel("ffg");
			lbl.setIcon(icon);
			frame.add(lbl);
			frame.setVisible(true);
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			
		}
		
	
	
	

}
